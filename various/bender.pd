#N canvas 164 100 1028 632 12;
#N canvas 102 175 931 653 prepdata 0;
#X msg 218 132 click;
#X obj 218 108 sel 1;
#X msg 263 132 close;
#X obj 14 108 list length;
#X msg 14 155 \$1, f 2;
#X obj 14 178 until;
#X obj 14 201 i;
#X obj 14 225 + 1;
#X obj 14 249 mod, f 6;
#X obj 14 366 list;
#X obj 14 389 list split, f 12;
#X obj 54 412 route bang;
#X obj 121 458 symbol;
#X obj 121 435 list trim;
#X obj 92 292 -;
#X obj 92 316 abs;
#X obj 14 273 t b f, f 7;
#X msg 158 182 -1, f 2;
#X obj 14 132 t f f f b, f 21;
#X obj 218 165 text define \$0-wab;
#X obj 144 537 text set \$0-wab;
#X obj 52 366 sel 1;
#X obj 42 458 symbol;
#X obj 52 342 == 1;
#X obj 14 84 t a a b, f 23;
#X msg 172 132 clear;
#X obj 14 435 route list;
#X msg 167 514 1e+25;
#X obj 14 40 route layers layer, f 105;
#X obj 426 132 list length;
#X obj 426 179 array size \$0-layerdata;
#X obj 403 230 array set \$0-layerdata;
#X obj 436 155 s \$0-layerdatasize;
#X obj 14 16 inlet;
#X obj 380 108 t b a a;
#X obj 380 333 array min \$0-layerdata;
#X obj 380 283 array max \$0-layerdata;
#X obj 390 358 s \$0-layerdatamin;
#X obj 390 309 s \$0-layerdatamax;
#X obj 390 84 array define \$0-templayerdata;
#X obj 426 203 array size \$0-templayerdata;
#X obj 403 255 array set \$0-templayerdata;
#X text 602 83 <-- Backup layer data for easy restore.;
#X text 568 229 <-- Write single layer data to array.;
#X text 596 254 <-- Write single layer data to temp array.;
#X text 519 308 <-- Find array max value;
#X text 519 357 <-- Find array min value;
#X text 261 536 <-- Write neural net layers information to text object.;
#N canvas 836 348 316 264 normalize 0;
#X obj 99 145 f \$0;
#X obj 99 122 loadbang;
#X obj 11 12 r \$0-layerdatamax;
#X obj 11 96 t f f;
#X obj 40 122 * -1;
#X obj 69 96 r \$0-layerdatasize;
#X obj 11 168 pack f f f f, f 13;
#X msg 11 193 \; \$4-layerdata bounds 0 \$1 \$3 \$2;
#X obj 141 12 r \$0-layerdatamin;
#X obj 141 36 * -1;
#X obj 11 66 expr if($f1>$f2 \, $f1 \, $f2);
#X text 10 229 Normalize graph to array min/max values;
#X connect 0 0 6 3;
#X connect 1 0 0 0;
#X connect 2 0 10 0;
#X connect 3 0 6 0;
#X connect 3 1 4 0;
#X connect 4 0 6 1;
#X connect 5 0 6 2;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 9 0 10 1;
#X connect 10 0 3 0;
#X restore 286 309 pd normalize;
#X obj 121 561 text size \$0-wab;
#X obj 121 488 t b a b;
#X obj 121 585 s \$0-nolayers;
#N canvas 879 157 322 132 selector 0;
#X obj 11 16 r \$0-nolayers;
#X msg 43 64 range 0 \$1;
#X obj 11 94 s \$0-layerselector;
#X obj 148 16 r \$0-layerselectortoi;
#X obj 148 40 i;
#X obj 148 94 s \$0-layerselectin;
#X obj 11 40 t b f;
#X msg 11 64 0, f 2;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 6 0 7 0;
#X connect 6 1 1 0;
#X connect 7 0 2 0;
#X restore 121 614 pd selector;
#X obj 218 84 tgl 19 0 empty \$0-showlayers Show 25 9 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 380 429 vis \$1;
#X obj 380 451 s \$0-layerdata;
#X obj 380 407 r \$0-vislayerdata;
#X text 431 428 <-- Plot array to graph;
#X connect 0 0 19 0;
#X connect 1 0 0 0;
#X connect 1 1 2 0;
#X connect 2 0 19 0;
#X connect 3 0 18 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 7 0 6 1;
#X connect 8 0 16 0;
#X connect 9 0 10 0;
#X connect 10 0 26 0;
#X connect 10 1 11 0;
#X connect 11 1 13 0;
#X connect 12 0 50 0;
#X connect 13 0 12 0;
#X connect 14 0 15 0;
#X connect 15 0 10 1;
#X connect 15 0 23 0;
#X connect 16 0 9 0;
#X connect 16 1 14 0;
#X connect 17 0 6 1;
#X connect 18 0 4 0;
#X connect 18 1 8 1;
#X connect 18 2 14 1;
#X connect 18 3 17 0;
#X connect 21 0 22 0;
#X connect 22 0 50 0;
#X connect 23 0 21 0;
#X connect 24 0 3 0;
#X connect 24 1 9 1;
#X connect 24 2 25 0;
#X connect 25 0 19 0;
#X connect 26 1 22 1;
#X connect 27 0 20 1;
#X connect 28 0 24 0;
#X connect 28 1 34 0;
#X connect 29 0 32 0;
#X connect 29 0 30 0;
#X connect 29 0 40 0;
#X connect 33 0 28 0;
#X connect 34 0 35 0;
#X connect 34 0 36 0;
#X connect 34 1 31 0;
#X connect 34 1 41 0;
#X connect 34 2 29 0;
#X connect 35 0 37 0;
#X connect 36 0 38 0;
#X connect 49 0 51 0;
#X connect 50 0 49 0;
#X connect 50 1 20 0;
#X connect 50 2 27 0;
#X connect 53 0 1 0;
#X connect 54 0 55 0;
#X connect 56 0 54 0;
#X restore 570 52 pd prepdata;
#X f 15;
#X obj 570 258 r \$0-out;
#X text 686 80 <-- Extract layers information from neural net;
#X text 686 176 <-- Reset layer data from temp array;
#X text 686 200 <-- Push updates to neural net;
#N canvas 210 78 721 561 tamper 1;
#X obj 67 363 *;
#X obj 67 410 +, f 16;
#X obj 10 137 array size \$0-templayerdata;
#X msg 10 185 \$1, f 2;
#X obj 10 209 until;
#X obj 10 233 i;
#X obj 10 257 + 1;
#X obj 10 281 mod;
#X obj 67 523 array set \$0-layerdata;
#X text 230 329 <-- Get data from backup layer;
#X text 233 522 <-- Set altered data to main layer;
#X obj 10 330 array get \$0-templayerdata 0 1;
#X obj 10 161 t f f b;
#X msg 56 214 -1, f 2;
#X obj 10 14 r \$0-mltply;
#X obj 102 14 r \$0-offset;
#X obj 10 62 t b f, f 11;
#X obj 102 62 t b f, f 11;
#X obj 10 86 del 500;
#X obj 102 86 del 500;
#X msg 482 50 1, f 1;
#X obj 482 75 s \$0-mltplyres;
#X msg 598 50 0, f 1;
#X obj 598 102 s \$0-offsetres;
#X obj 598 14 loadbang;
#X obj 482 14 r \$0-tamperres;
#X obj 186 14 r \$0-flip;
#X obj 186 38 expr $f1*-2+1;
#X obj 186 62 t b f;
#X obj 186 86 del 500;
#X obj 67 387 *, f 22;
#X obj 598 75 s \$0-flipres;
#X obj 372 14 r \$0-seeder;
#X obj 67 494 +, f 19;
#X obj 372 62 t b f;
#X obj 10 305 t f f b;
#X obj 598 127 s \$0-seederres;
#X obj 372 86 del 500;
#X obj 197 410 expr ((random(-$f2 \, $f2)* 0.0001)+(random(-$f2 \, $f2)* 0.0001)+(random(-$f2 \, $f2)* 0.0001)+(random(-$f2 \, $f2)* 0.0001)) / 4, f 30;
#X text 416 409 <-- randomize with gaussian distribution;
#X connect 0 0 30 0;
#X connect 1 0 33 0;
#X connect 2 0 12 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 5 1;
#X connect 6 0 7 0;
#X connect 7 0 35 0;
#X connect 11 0 0 0;
#X connect 12 0 3 0;
#X connect 12 1 7 1;
#X connect 12 2 13 0;
#X connect 13 0 5 1;
#X connect 14 0 16 0;
#X connect 15 0 17 0;
#X connect 16 0 18 0;
#X connect 16 1 0 1;
#X connect 17 0 19 0;
#X connect 17 1 1 1;
#X connect 18 0 2 0;
#X connect 19 0 2 0;
#X connect 20 0 21 0;
#X connect 22 0 23 0;
#X connect 22 0 31 0;
#X connect 22 0 36 0;
#X connect 24 0 20 0;
#X connect 24 0 22 0;
#X connect 25 0 20 0;
#X connect 25 0 22 0;
#X connect 26 0 27 0;
#X connect 27 0 28 0;
#X connect 28 0 29 0;
#X connect 28 1 30 1;
#X connect 29 0 2 0;
#X connect 30 0 1 0;
#X connect 32 0 34 0;
#X connect 33 0 8 0;
#X connect 34 0 37 0;
#X connect 34 1 38 1;
#X connect 35 0 11 0;
#X connect 35 1 8 1;
#X connect 35 2 38 0;
#X connect 37 0 2 0;
#X connect 38 0 33 1;
#X restore 570 129 pd tamper;
#X f 15;
#X obj 578 379 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#N canvas 280 100 442 119 nn_tilde_bending 0;
#X obj 17 17 inlet;
#X obj 17 73 pdcontrol;
#X msg 17 45 browse https://github.com/blazejkotowski/nn_tilde_bending;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X restore 578 403 pd nn_tilde_bending;
#X text 25 527 PUSH your changes to the selected neural net layer., f 66;
#X text 575 347 Author: Martin Heinze, f 66;
#X text 602 378 <-- click to open nn_tilde_bending Repo on Github., f 62;
#N canvas 613 211 139 97 getnndata 0;
#X obj 12 13 r \$0-getnndata;
#X msg 12 37 layers;
#X obj 12 61 s \$0-out;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X restore 570 81 pd getnndata;
#X f 15;
#N canvas 333 453 428 274 getlayerdata 0;
#X obj 44 61 text get \$0-wab;
#X obj 12 189 symbol;
#X msg 12 213 get_weights \$1;
#X obj 44 85 s \$0-layername;
#X obj 12 13 r \$0-layerselect;
#X obj 51 167 r \$0-layername;
#X obj 12 237 s \$0-out;
#X text 154 84 <-- Select neural net layer;
#X text 126 212 <-- Extract neural net layer information;
#X obj 22 135 s \$0-tamperres;
#X obj 12 37 t b f;
#X obj 12 111 del 500;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 2 0 6 0;
#X connect 4 0 10 0;
#X connect 5 0 1 1;
#X connect 10 0 11 0;
#X connect 10 1 0 0;
#X connect 11 0 9 0;
#X connect 11 0 1 0;
#X restore 570 105 pd getlayerdata;
#X text 686 104 <-- Extract neural net layer information;
#N canvas 671 269 256 183 reset 0;
#X obj 39 89 array get \$0-templayerdata;
#X obj 39 113 array set \$0-layerdata;
#X obj 16 19 r \$0-reset;
#X obj 16 43 t b b b;
#X obj 16 137 s \$0-setdatares;
#X obj 62 66 s \$0-tamperres;
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 1 0 0;
#X connect 3 2 5 0;
#X restore 570 177 pd reset;
#X f 15;
#N canvas 700 298 288 277 push 0;
#X obj 40 164 list append;
#X obj 40 188 list trim;
#X obj 79 94 r \$0-layername;
#X obj 10 15 r \$0-setdata;
#X obj 40 116 symbol;
#X msg 40 140 set_weights \$1;
#X obj 114 117 array get \$0-layerdata;
#X obj 40 212 s \$0-out;
#X obj 10 40 t b b b;
#X obj 10 237 s \$0-layerselectin;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 4 1;
#X connect 3 0 8 0;
#X connect 4 0 5 0;
#X connect 5 0 0 0;
#X connect 6 0 0 1;
#X connect 8 0 9 0;
#X connect 8 1 4 0;
#X connect 8 2 6 0;
#X restore 570 201 pd push;
#X f 15;
#X text 686 128 <-- Tamper with neural net layer information;
#X obj 570 282 outlet;
#X obj 570 28 inlet;
#X text 686 224 <-- MSPrior settings;
#X text 686 152 <-- Enable/ Cache reset/ reload neural net;
#X text 25 557 When loading MSPrior models \, temperature and listen mode can be set through slider/ toggle., f 66;
#N canvas 521 307 399 282 setnn 0;
#X obj 14 11 r \$0-reload;
#X msg 54 84 reload;
#X obj 54 107 s \$0-out;
#X obj 74 61 s \$0-tamperres;
#X obj 14 35 t b b b b;
#X obj 34 131 s \$0-getnndatadummy;
#X msg 188 35 enable \$1;
#X msg 266 35 set reset True;
#X obj 188 11 r \$0-pren;
#X obj 266 11 r \$0-prcr;
#X obj 188 61 s \$0-out;
#X obj 266 61 s \$0-out;
#X obj 14 163 f \$0;
#X msg 14 188 \; \$1-layerselectin bang \; \$1-preninit 1 \; \$1-prlginit 0 \; \$1-prtmpmsinit bang \;;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 4 0 12 0;
#X connect 4 1 5 0;
#X connect 4 2 1 0;
#X connect 4 3 3 0;
#X connect 6 0 10 0;
#X connect 7 0 11 0;
#X connect 8 0 6 0;
#X connect 9 0 7 0;
#X connect 12 0 13 0;
#X restore 570 153 pd setnn;
#X f 15;
#N canvas 644 394 388 150 setmsprior 0;
#X msg 11 37 set temperature \$1;
#X obj 11 14 r \$0-prtmpms;
#X obj 11 60 s \$0-out;
#X msg 169 86 set listen \$1;
#X msg 169 60 symbol False;
#X msg 271 60 symbol True;
#X obj 169 14 r \$0-prlg;
#X obj 169 108 s \$0-out;
#X obj 169 37 sel 0, f 15;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 3 0 7 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 8 0 4 0;
#X connect 8 1 5 0;
#X restore 570 225 pd setmsprior;
#X f 15;
#X obj 27 28 cnv 19 385 220 empty empty Bending 5 12 0 12 #c6feff #404040 0;
#X obj 33 54 bng 14 250 50 0 \$0-getnndata \$0-getnndatadummy Initialise 18 7 0 8 #c6feff #000000 #000000;
#X floatatom 106 54 5 0 0 1 Layers \$0-nolayers \$0-nolayersdummy 8;
#X floatatom 204 78 8 0 0 2 Layer \$0-layerselectin \$0-layerselect 8;
#X floatatom 251 78 12 0 0 2 Size \$0-layerdatasize \$0-layerdatasizedummy 8;
#X floatatom 360 78 7 0 0 2 Min \$0-layerdatamin \$0-layerdatamindummy 8;
#X floatatom 318 78 7 0 0 2 Max \$0-layerdatamax \$0-layerdatamaxdummy 8;
#X listbox 33 98 74 0 0 1 - \$0-layername \$0-layernamedummy 8;
#X obj 36 78 hsl 162 14 0 58 0 0 \$0-layerselectortoi \$0-layerselector Select 65 7 0 8 #c6feff #000000 #000000 0 1;
#N canvas 1062 628 450 278 (subpatch) 0;
#X array \$0-layerdata 28672 float 2;
#X coords 0 0.635736 28672 -0.635736 280 100 1 0 0;
#X restore 33 140 graph;
#X obj 365 204 bng 36 250 50 0 \$0-setdata \$0-setdatares PUSH 6 18 0 10 #c6feff #000000 #000000;
#X obj 365 162 bng 14 250 50 0 \$0-reset \$0-resetdummy RES 18 7 0 8 #c6feff #000000 #000000;
#X obj 329 142 vsl 16 95 0 3 0 0 \$0-mltply \$0-mltplyres empty 0 -9 0 6 #9f9f9f #000000 #000000 0 1;
#X obj 313 142 vsl 16 95 -0.09 0.09 0 0 \$0-offset \$0-offsetres empty -2 -9 0 6 #dfdfdf #000000 #000000 0 1;
#X obj 365 140 tgl 14 0 \$0-flip \$0-flipres INV 18 7 0 8 #c6feff #000000 #000000 0 1;
#X obj 345 142 vsl 16 95 2 2000 0 0 \$0-seeder \$0-seederres empty 0 -9 0 6 #606060 #dfdfdf #000000 0 1;
#X obj 422 123 cnv 19 125 65 empty empty MSPrior 5 12 0 12 #ffe3c6 #404040 0;
#X obj 430 149 hsl 75 14 1 1000 0 0 \$0-prtmpms \$0-prtmpmsinit Temperature 10 7 0 8 #ffe3c6 #000000 #000000 0 1;
#X obj 427 168 tgl 14 0 \$0-prlg \$0-prlginit Listen\ mode 18 7 0 8 #ffe3c6 #000000 #000000 0 1;
#X floatatom 509 149 6 0 0 0 - \$0-prtmpms \$0-prtmpmsdummy 8;
#X obj 422 28 cnv 19 125 85 empty empty Neural\ Net 5 12 0 12 #c6ffc7 #404040 0;
#X obj 427 73 bng 14 250 50 0 \$0-prcr \$0-prcrinit Cache\ Reset 18 7 0 8 #c6ffc7 #000000 #000000;
#X obj 427 54 tgl 14 0 \$0-pren \$0-preninit Enable\  18 7 0 8 #c6ffc7 #000000 #000000 0 1;
#X obj 427 92 bng 14 250 50 0 \$0-reload \$0-reloaddummy Reload 18 7 0 8 #c6ffc7 #000000 #000000;
#X text 515 230 BETA;
#N canvas 794 524 214 150 presets 0;
#X obj 17 17 loadbang;
#X obj 17 41 f \$0;
#X msg 17 65 \; \$1-preninit 0 \; \$1-prtmpmsinit 55 \; \$1-vislayerdatapres 1;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X restore 614 28 pd presets;
#X text 25 267 Bender is inspired by Błażej Kotowski's work with his fork of nn~. The component can be used to tamper with nn~ compatible based neural nets. Connect the outlet to the first inlet of any nn~ (bending) object and the dedicated outlet of nn~ (bending) to the inlet of this abstraction., f 66;
#X obj 365 184 tgl 14 0 \$0-vislayerdata \$0-vislayerdatapres PLOT 18 7 0 8 #c6feff #000000 #000000 0 1;
#X obj 169 54 tgl 14 0 \$0-showlayers \$0-showlayersinit Show 18 7 0 8 #c6feff #000000 #000000 0 1;
#X text 575 327 Last updated 08.02.2025, f 66;
#X text 25 352 Initialise reads all layers information from the neural net and stores the information into a text object., f 66;
#X text 25 392 By selecting a layer via the horizontal slider \, its contents are being loaded into the \$0-layerdata array. Graph scaling is applied., f 66;
#X text 25 447 Tamper with the layer data by moving the sliders on the right (1st: change offset \, 2nd: change spread \, 3rd: randomize values (gaussian distribution)) or click around in the graph itself. INV inverts the array. RESet overwrites your current changes (before Pushing)., f 66;
#X connect 1 0 17 0;
#X connect 6 0 7 0;
#X connect 18 0 0 0;
#X coords 0 -1 1 1 535 235 2 20 20;
