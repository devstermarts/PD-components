#N canvas 313 67 993 746 12;
#N canvas 389 186 931 653 prepdata 0;
#X msg 218 132 click;
#X obj 218 108 sel 1;
#X msg 263 132 close;
#X obj 14 108 list length;
#X msg 14 155 \$1, f 2;
#X obj 14 178 until;
#X obj 14 201 i;
#X obj 14 225 + 1;
#X obj 14 249 mod, f 6;
#X obj 14 366 list;
#X obj 14 389 list split, f 12;
#X obj 54 412 route bang;
#X obj 121 458 symbol;
#X obj 121 435 list trim;
#X obj 92 292 -;
#X obj 92 316 abs;
#X obj 14 273 t b f, f 7;
#X msg 158 182 -1, f 2;
#X obj 14 132 t f f f b, f 21;
#X obj 218 165 text define \$0-wab;
#X obj 144 537 text set \$0-wab;
#X obj 52 366 sel 1;
#X obj 42 458 symbol;
#X obj 52 342 == 1;
#X obj 14 84 t a a b, f 23;
#X msg 172 132 clear;
#X obj 14 435 route list;
#X msg 167 514 1e+25;
#X obj 14 40 route layers layer, f 105;
#X obj 426 132 list length;
#X obj 426 179 array size \$0-layerdata;
#X obj 403 230 array set \$0-layerdata;
#X obj 436 155 s \$0-layerdatasize;
#X obj 14 16 inlet;
#X obj 380 108 t b a a;
#X obj 380 333 array min \$0-layerdata;
#X obj 380 283 array max \$0-layerdata;
#X obj 380 358 s \$0-layerdatamin;
#X obj 380 309 s \$0-layerdatamax;
#X obj 390 84 array define \$0-templayerdata;
#X obj 426 203 array size \$0-templayerdata;
#X obj 403 255 array set \$0-templayerdata;
#X text 602 83 <-- Backup layer data for easy restore.;
#X text 568 229 <-- Write single layer data to array.;
#X text 596 254 <-- Write single layer data to temp array.;
#X text 509 308 <-- Find array max value;
#X text 509 357 <-- Find array min value;
#X text 261 536 <-- Write neural net layers information to text object.;
#N canvas 836 348 316 278 normalize 0;
#X obj 99 145 f \$0;
#X obj 99 122 loadbang;
#X obj 11 12 r \$0-layerdatamax;
#X obj 11 96 t f f;
#X obj 40 122 * -1;
#X obj 69 96 r \$0-layerdatasize;
#X obj 11 168 pack f f f f, f 13;
#X msg 11 193 \; \$4-layerdata bounds 0 \$1 \$3 \$2;
#X obj 141 12 r \$0-layerdatamin;
#X obj 141 36 * -1;
#X obj 11 66 expr if($f1>$f2 \, $f1 \, $f2);
#X text 10 229 Normalize graph to array min/max values;
#X connect 0 0 6 3;
#X connect 1 0 0 0;
#X connect 2 0 10 0;
#X connect 3 0 6 0;
#X connect 3 1 4 0;
#X connect 4 0 6 1;
#X connect 5 0 6 2;
#X connect 6 0 7 0;
#X connect 8 0 9 0;
#X connect 9 0 10 1;
#X connect 10 0 3 0;
#X restore 286 309 pd normalize;
#X obj 121 561 text size \$0-wab;
#X obj 121 488 t b a b;
#X obj 121 585 s \$0-nolayers;
#N canvas 879 157 322 132 selector 0;
#X obj 11 16 r \$0-nolayers;
#X msg 43 64 range 0 \$1;
#X obj 11 94 s \$0-layerselector;
#X obj 148 16 r \$0-layerselectortoi;
#X obj 148 40 i;
#X obj 148 94 s \$0-layerselectin;
#X obj 11 40 t b f;
#X msg 11 64 0, f 2;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 6 0 7 0;
#X connect 6 1 1 0;
#X connect 7 0 2 0;
#X restore 121 614 pd selector;
#X obj 218 84 tgl 19 0 empty \$0-showlayers Show 25 9 0 12 #fcfcfc #000000 #000000 0 1;
#X connect 0 0 19 0;
#X connect 1 0 0 0;
#X connect 2 0 19 0;
#X connect 3 0 18 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 7 0 6 1;
#X connect 8 0 16 0;
#X connect 9 0 10 0;
#X connect 10 0 26 0;
#X connect 10 1 11 0;
#X connect 11 1 13 0;
#X connect 12 0 50 0;
#X connect 13 0 12 0;
#X connect 14 0 15 0;
#X connect 15 0 10 1;
#X connect 15 0 23 0;
#X connect 16 0 9 0;
#X connect 16 1 14 0;
#X connect 17 0 6 1;
#X connect 18 0 4 0;
#X connect 18 1 8 1;
#X connect 18 2 14 1;
#X connect 18 3 17 0;
#X connect 21 0 22 0;
#X connect 22 0 50 0;
#X connect 23 0 21 0;
#X connect 24 0 3 0;
#X connect 24 1 9 1;
#X connect 24 2 25 0;
#X connect 25 0 19 0;
#X connect 26 1 22 1;
#X connect 27 0 20 1;
#X connect 28 0 24 0;
#X connect 28 1 34 0;
#X connect 29 0 32 0;
#X connect 29 0 30 0;
#X connect 29 0 40 0;
#X connect 33 0 28 0;
#X connect 34 0 35 0;
#X connect 34 0 36 0;
#X connect 34 1 31 0;
#X connect 34 1 41 0;
#X connect 34 2 29 0;
#X connect 35 0 37 0;
#X connect 36 0 38 0;
#X connect 49 0 51 0;
#X connect 50 0 49 0;
#X connect 50 1 20 0;
#X connect 50 2 27 0;
#X connect 53 0 1 0;
#X restore 510 52 pd prepdata;
#X f 15;
#X obj 510 228 r \$0-out;
#X text 626 80 <-- Extract layers information from neural net;
#X text 626 152 <-- Reload neural net;
#X text 626 176 <-- Reset layer data from temp array;
#X text 626 200 <-- Push updates to neural net;
#N canvas 235 333 679 471 tamper 0;
#X obj 67 363 *;
#X obj 67 410 +, f 16;
#X obj 10 137 array size \$0-templayerdata;
#X msg 10 185 \$1, f 2;
#X obj 10 209 until;
#X obj 10 233 i;
#X obj 10 257 + 1;
#X obj 10 281 mod;
#X obj 67 433 array set \$0-layerdata;
#X text 230 329 <-- Get data from backup layer;
#X text 233 432 <-- Set altered data to main layer;
#X obj 10 330 array get \$0-templayerdata 0 1;
#X obj 10 305 t f f;
#X obj 10 161 t f f b;
#X msg 56 214 -1, f 2;
#X obj 10 14 r \$0-mltply;
#X obj 102 14 r \$0-offset;
#X obj 10 62 t b f, f 11;
#X obj 102 62 t b f, f 11;
#X obj 10 86 del 500;
#X obj 102 86 del 500;
#X msg 302 50 1, f 1;
#X obj 302 75 s \$0-mltplyres;
#X msg 418 50 0, f 1;
#X obj 418 102 s \$0-offsetres;
#X obj 418 14 loadbang;
#X obj 302 14 r \$0-tamperres;
#X obj 186 14 r \$0-flip;
#X obj 186 38 expr $f1*-2+1;
#X obj 186 62 t b f;
#X obj 186 86 del 500;
#X obj 67 387 *, f 22;
#X obj 418 75 s \$0-flipres;
#X connect 0 0 31 0;
#X connect 1 0 8 0;
#X connect 2 0 13 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 0 5 1;
#X connect 6 0 7 0;
#X connect 7 0 12 0;
#X connect 11 0 0 0;
#X connect 12 0 11 0;
#X connect 12 1 8 1;
#X connect 13 0 3 0;
#X connect 13 1 7 1;
#X connect 13 2 14 0;
#X connect 14 0 5 1;
#X connect 15 0 17 0;
#X connect 16 0 18 0;
#X connect 17 0 19 0;
#X connect 17 1 0 1;
#X connect 18 0 20 0;
#X connect 18 1 1 1;
#X connect 19 0 2 0;
#X connect 20 0 2 0;
#X connect 21 0 22 0;
#X connect 23 0 24 0;
#X connect 23 0 32 0;
#X connect 25 0 21 0;
#X connect 25 0 23 0;
#X connect 26 0 21 0;
#X connect 26 0 23 0;
#X connect 27 0 28 0;
#X connect 28 0 29 0;
#X connect 29 0 30 0;
#X connect 29 1 31 1;
#X connect 30 0 2 0;
#X connect 31 0 1 0;
#X restore 510 129 pd tamper;
#X f 15;
#X obj 21 21 cnv 19 458 268 empty empty empty 20 110 1 200 #f9dedd #ffe5e5 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-layerdata 23040 float 2;
#X coords 0 0.755367 23040 -0.755367 350 100 1 0 0;
#X restore 58 141 graph;
#X obj 431 247 bng 36 250 50 0 \$0-setdata \$0-setdatares PUSH 6 18 0 10 #f8dedd #000000 #000000;
#X floatatom 229 88 3 0 0 3 - \$0-layerselectin \$0-layerselect 8;
#X obj 58 33 bng 24 250 50 0 \$0-getnndata \$0-getnndatadummy INIT 4 12 0 6 #f9dedd #000000 #000000;
#X floatatom 278 88 12 0 0 0 Size \$0-layerdatasize \$0-layerdatasizedummy 8;
#X obj 85 33 bng 24 250 50 0 \$0-reload \$0-reloaddummy REL 5 12 0 8 #f9dedd #000000 #000000;
#X floatatom 422 88 7 0 0 0 Min \$0-layerdatamin \$0-layerdatamindummy 8;
#X floatatom 362 88 7 0 0 0 Max \$0-layerdatamax \$0-layerdatamaxdummy 8;
#X obj 443 217 bng 24 250 50 0 \$0-reset \$0-resetdummy RES 5 12 0 8 #f9dedd #000000 #000000;
#X obj 424 143 vsl 16 95 0 3 0 0 \$0-mltply \$0-mltplyres empty 0 -9 0 6 #c8b1b2 #000000 #000000 0 1;
#X obj 408 143 vsl 16 95 -0.09 0.09 0 0 \$0-offset \$0-offsetres empty -2 -9 0 6 #dbc2c3 #000000 #000000 0 1;
#X listbox 58 108 80 0 0 0 Name \$0-layername \$0-layernamedummy 8;
#X obj 18 679 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#N canvas 280 100 442 119 nn_tilde_bending 0;
#X obj 17 17 inlet;
#X obj 17 73 pdcontrol;
#X msg 17 45 browse https://github.com/blazejkotowski/nn_tilde_bending;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X restore 18 703 pd nn_tilde_bending;
#X text 15 307 Bender is inspired by Błażej Kotowski's work with his fork of nn~. The component can be used to tamper with RAVE and vschaos2 based neural nets. Connect the outlet to the first inlet of any nn~ (bending) object and the dedicated outlet of nn~ to the inlet of this abstraction., f 66;
#X text 15 392 INIT reads all layers information from the neural net loaded via nn~ and parses the information into a text object., f 66;
#X text 15 432 REL reloads the neural net (standard 'reload' message to nn~), f 66;
#X text 15 502 Tamper with the layer data by moving the sliders on the right of the graph or click around in the graph itself., f 66;
#X text 15 542 PUSH your changes to the selected neural net layer., f 66;
#X text 15 572 RESet overwrites your changes by restoring the layer's initial values., f 66;
#X text 15 632 Author: Martin Heinze, f 66;
#X text 42 678 <-- click to open nn_tilde_bending Repo on Github., f 62;
#X obj 440 141 tgl 16 0 \$0-flip \$0-flipres empty -18 4 0 6 #f8dedd #000000 #000000 0 1;
#X floatatom 58 60 3 0 0 0 Layers \$0-nolayers \$0-nolayersdummy 8;
#N canvas 584 182 195 189 reload 0;
#X obj 14 11 r \$0-reload;
#X msg 54 84 reload;
#X obj 54 107 s \$0-out;
#X obj 74 61 s \$0-tamperres;
#X obj 14 155 s \$0-layerselectin;
#X obj 14 35 t b b b b;
#X obj 34 131 s \$0-getnndatadummy;
#X connect 0 0 5 0;
#X connect 1 0 2 0;
#X connect 5 0 4 0;
#X connect 5 1 6 0;
#X connect 5 2 1 0;
#X connect 5 3 3 0;
#X restore 510 153 pd reload;
#X f 15;
#N canvas 613 211 139 97 getnndata 0;
#X obj 12 13 r \$0-getnndata;
#X msg 12 37 layers;
#X obj 12 61 s \$0-out;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X restore 510 81 pd getnndata;
#X f 15;
#N canvas 589 326 428 246 getlayerdata 0;
#X obj 22 37 text get \$0-wab;
#X obj 12 150 symbol;
#X msg 12 174 get_weights \$1;
#X obj 22 61 s \$0-layername;
#X obj 12 13 r \$0-layerselect;
#X obj 51 128 r \$0-layername;
#X obj 12 198 s \$0-out;
#X text 132 60 <-- Select neural net layer;
#X text 126 173 <-- Extract neural net layer information;
#X obj 12 106 del 300;
#X msg 12 84 bang;
#X obj 69 150 s \$0-tamperres;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 2 0 6 0;
#X connect 4 0 0 0;
#X connect 4 0 10 0;
#X connect 5 0 1 1;
#X connect 9 0 1 0;
#X connect 9 0 11 0;
#X connect 10 0 9 0;
#X restore 510 105 pd getlayerdata;
#X text 626 104 <-- Extract neural net layer information;
#N canvas 671 269 256 183 reset 0;
#X obj 39 89 array get \$0-templayerdata;
#X obj 39 113 array set \$0-layerdata;
#X obj 16 19 r \$0-reset;
#X obj 16 43 t b b b;
#X obj 16 137 s \$0-setdatares;
#X obj 62 66 s \$0-tamperres;
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 1 0 0;
#X connect 3 2 5 0;
#X restore 510 177 pd reset;
#X f 15;
#N canvas 700 298 288 277 push 0;
#X obj 40 164 list append;
#X obj 40 188 list trim;
#X obj 79 94 r \$0-layername;
#X obj 10 15 r \$0-setdata;
#X obj 40 116 symbol;
#X msg 40 140 set_weights \$1;
#X obj 114 117 array get \$0-layerdata;
#X obj 40 212 s \$0-out;
#X obj 10 40 t b b b;
#X obj 10 237 s \$0-layerselectin;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 4 1;
#X connect 3 0 8 0;
#X connect 4 0 5 0;
#X connect 5 0 0 0;
#X connect 6 0 0 1;
#X connect 8 0 9 0;
#X connect 8 1 4 0;
#X connect 8 2 6 0;
#X restore 510 201 pd push;
#X f 15;
#X text 626 128 <-- Tamper with neural net layer information;
#X obj 61 88 hsl 162 14 0 50 0 0 \$0-layerselectortoi \$0-layerselector Select 65 7 0 8 #f9dedd #000000 #000000 0 1;
#X obj 510 252 outlet;
#X obj 510 28 inlet;
#X text 440 26 BETA;
#X text 15 462 By selecting a layer via the horizontal slider \, its contents are being loaded into the layerdata-array. Graph scaling is applied., f 66;
#X text 15 612 Last updated 16.10.2024, f 66;
#X connect 1 0 40 0;
#X connect 20 0 21 0;
#X connect 41 0 0 0;
#X coords 0 -1 1 1 460 270 1 20 20;
